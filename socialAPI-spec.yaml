openapi: 3.0.0
info:
  version: 1.0.0
  title: Social Network API
servers:
  - url: 'http://localhost:3000'
paths:

######################### User Collection Starts here #####################

#-----------------
# User Register/Create API
#------------------
  /users:
    post:
        summary: 'Create a new user'
        operationId: createUser
        requestBody:
            description: 'User to add to system'
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/User'
        responses:
            '201':
                description: 'User successfully added'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 201
                            message: 'user successfully created'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
#-----------------
# Get Multiple users
#------------------
    get:
      summary: 'Returns list of users based on limit and offset'
      operationId: listUser
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: type
          required: true
          description: Type of user to be retrived.
          schema:
              type: string
              enum: 
                  # Get all users
                  - all
                  # Get users followed by current user
                  - following
                  # Get random user , Note: Offset wont work with this type
                  - random
      responses:
        '200':
          description: 'List of users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
              example: 
                  - id: 21
                    name: 'Ellie D'
                    username: 'its_ellie'
                    email: 'ellie@gmail.com'
                    meta: {
                        gender: 'Female',
                        city: 'New York',
                        country: 'USA'
                    }
                  - id: 10
                    name: 'Pranjal Pandey'
                    username: 'physcocode'
                    email: 'pranjal@corpusvision.com'
                    meta: {
                        gender: 'Male',
                        city: 'Mumbai',
                        country: 'India'
                    }
                  - id: 10
                    name: 'Vineet Singh'
                    username: 'Veneed'
                    email: 'vineet@corpusvision.com'
                    meta: {
                        gender: 'Male',
                        city: 'Mumbai',
                        country: 'India'
                    }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


#-----------------
# Get Single User
#------------------
  /users/{id}:
    get:
      summary: 'Returns details about a particular user'
      operationId: getUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Details about a user by ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                  Pranjal:
                      value:
                        id: 10
                        name: 'Pranjal Pandey'
                        username: 'physcocode'
                        email: 'pranjal@corpusvision.com'
                        meta: {
                            gender: 'Male',
                            city: 'Mumbai',
                            country: 'India'
                        }
                  Ellie:
                    value:
                        id: 21
                        name: 'Ellie D'
                        username: 'its_ellie'
                        email: 'ellie@gmail.com'
                        meta: {
                            gender: 'Female',
                            city: 'New York',
                            country: 'USA'
                        }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

#-----------------
# Update Single User
#------------------
    put:
      summary: 'update detail about a single user'
      operationId: updateUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
          description: 'User to add to system'
          content:
            application/json:
                schema:
                    $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'Updated user detail'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                  Pranjal:
                      value:
                        id: 10
                        name: 'Pranjal P'
                        username: 'physcocode'
                        email: 'pranjal@corpusvision.com'
                        meta: {
                            gender: 'Male',
                            city: 'Mumbai',
                            country: 'India'
                        }
                  Ellie:
                    value:
                        id: 21
                        name: 'Ellie Don'
                        username: 'its_ellie'
                        email: 'ellie@gmail.com'
                        meta: {
                            gender: 'Female',
                            city: 'New York',
                            country: 'USA'
                        }


        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

#-----------------
# Delete Single User
#------------------
    delete:
        summary: 'Delete a single user'
        operationId: deleteUser
        parameters:
            - name: id
              in: path
              description: ID of the user
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
        responses:
            '200':
                description: 'User successfully deleted'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'user successfully deleted'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'

################################# User Collection Ends Here ###############################  

######################### Post Collection Starts here #####################
# Posts are actual entity that keeps status update in text, image upload etc it is backbone of social network
#-----------------
# Create Post
#------------------
  /posts:
    post:
        summary: 'Create a new post'
        operationId: createPost
        requestBody:
            description: 'Add Post to system'
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Post'
        responses:
            '201':
                description: 'Post Successfully Added'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 201
                            message: 'post successfully created'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
#-----------------
# Get Multiple posts
#------------------
    get:
      summary: 'Returns list of posts based on limit and offset'
      operationId: listPost
      tags:
        - post
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: type
          required: true
          description: type of possts to be retrived.
          schema:
              type: string
              enum: 
                  # Get all public post
                  - all
                  # Get posts of people followed by user
                  - following
                  # Get post of user both private and public
                  - me
      responses:
        '200':
          description: 'List of post'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
              example: 
                  - id: 21
                    name: 'Ellie D'
                    username: 'its_ellie'
                    email: 'ellie@gmail.com'
                    meta: {
                        gender: 'Female',
                        city: 'New York',
                        country: 'USA'
                    }
                  - id: 10
                    name: 'Pranjal Pandey'
                    username: 'physcocode'
                    email: 'pranjal@corpusvision.com'
                    meta: {
                        gender: 'Male',
                        city: 'Mumbai',
                        country: 'India'
                    }
                  - id: 10
                    name: 'Vineet Singh'
                    username: 'Veneed'
                    email: 'vineet@corpusvision.com'
                    meta: {
                        gender: 'Male',
                        city: 'Mumbai',
                        country: 'India'
                    }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


#-----------------
# Get Single Post
#------------------
  /posts/{id}:
    get:
      summary: 'Returns details about a particular post'
      operationId: getPost
      tags:
        - post
      parameters:
        - name: id
          in: path
          description: ID of the post
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Details about a post by its ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                  Pranjal:
                      value:
                        id: 10
                        name: 'Pranjal Pandey'
                        username: 'physcocode'
                        email: 'pranjal@corpusvision.com'
                        meta: {
                            gender: 'Male',
                            city: 'Mumbai',
                            country: 'India'
                        }
                  Ellie:
                    value:
                        id: 21
                        name: 'Ellie D'
                        username: 'its_ellie'
                        email: 'ellie@gmail.com'
                        meta: {
                            gender: 'Female',
                            city: 'New York',
                            country: 'USA'
                        }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

#-----------------
# Update Single Post , Note: Currently editing post is not provided but maybe in future , open for discussion
#------------------
    # put:
    #   summary: 'update detail about a single post'
    #   operationId: updatePost
    #   tags:
    #     - post
    #   parameters:
    #     - name: id
    #       in: path
    #       description: ID of the post
    #       required: true
    #       schema:
    #         type: integer
    #         format: int64
    #         minimum: 1
    #   requestBody:
    #       description: 'User to add to system'
    #       content:
    #         application/json:
    #             schema:
    #                 $ref: '#/components/schemas/Post'
    #   responses:
    #     '200':
    #       description: 'Updated user detail'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Post'
           
    #     default:
    #       description: Unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'

#-----------------
# Delete Single Post
#------------------
    delete:
        summary: 'Delete a single post'
        operationId: deletePost
        parameters:
            - name: id
              in: path
              description: ID of the post
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
        responses:
            '200':
                description: 'Post successfully deleted'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'post successfully deleted'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'



########################## Post Collection Ends here ######################


components:
  schemas:
#--------------------   
# Array of Users 
#--------------------
    Users:  
        type: array
        items:
            $ref: '#/components/schemas/User'

#-----------------------
# User model  
# extra user information can be stored in user meta like DOB, city etc 
#------------------------ 
    User:
      type: object
      required:
        - id
        - name
        - username
        - email
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        name:
          type: string
        username:
            type: string
        email:
          type: string
          format: email
        #meta can be used as object container to store any kind of information about user as per your application requires  
        meta:
          type: object
          additionalProperties: true  
          example: {
              'DOB': '10/10/1997',
              'City': 'mumbai'
          }
#-----------------------
# Post model
# All detail required to render post can be added in meta like discription, image url etc
#-----------------------
      
    Post:
      type: object
      required:
        - id
        - owner
        - visibility
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        #id of owner(user) post is added by   
        owner:
          type: integer
          format: int64
          minimum: 1
        created_at:
            type: string
            format: date-time
        visibility:
            type: string
            # limited type can be used to represent post which is displayed ti only friends or followers etc
            enum: 
                - public
                - private
                - limited  
        # meta holds all the property you would need to render the post in a view eg: status update, image url, video url etc    
        # Note : meta SHOULD ALWAYS have 'type' field to determine post type , helps in binding status updates with renders 
        meta:
          type: object
          properties:
            type:
                type: string
          required:
            - type
          additionalProperties: true  
          example: {
              'type': 'image',
              'status': 'i am a exaple status update',
              'image': 'example.com/image.png' 
          }
    
#-----------------------
#comment model
#------------------------    
    Comment:
      type: object
      required:
        - id
        - post
        - owner
        - comment
      properties:
        id:
          type: integer
          format: int64
        # id of post comment is part of  
        post:
          type: integer
        #id of owner(user) comment is done by   
        owner:
            type: integer
        #the actual comment    
        body:
          type: string
        created_at:
            type: string
            format: date-time

#-----------------------  
# Model to store the list of people who likes the post
#-----------------------
    Like:
      type: object
      required:
        - id
        - post
        - owner
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        # id of post like is part of  
        post:
          type: integer
        #id of owner(user) who liked the post
        owner:
            type: integer
        created_at:
            type: string
            format: date-time

#-----------------------  
# Model to store data in activity feed
#-----------------------
    Feed:
        type: object
        required:
            - id
            - owner
            - action
            - object
            - type
        properties:
            id:
                type: integer
                format: int64
                minimum: 1
          #id of owner(user) who performed action
            owner:
                type: integer
          #type of action performed (Verb)     
            action:
                type: string
          #id of object the action is performed on (Object can be other user,post etc)
            object:
                 type: integer 
          #type of activity (can be used to determine how to render feed in view)    
            type:
                 type: string
 
        example:
            # This is an exapmple of Pranjal (id:10) followed Vineet (id:20)
            id: 5
            owner: 10
            action: 'followed'
            object: 20 
            type: 'follow'
             

#-----------------------
# Simple model to return on successful create operations
#-----------------------
    Success:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          minimum: 200
          maximum: 201
        message:
          type: string
          example: 'Post has been successfully added'

#-----------------------
# General Error return model
#-----------------------
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          minimum: 400
          maximum: 511
        message:
          type: string

  parameters:
#-----------------------
# Wherever offset is requires in list
#-----------------------
    offsetParam:      
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
#-----------------------
# Wherever limit is required in list
#-----------------------
    limitParam:       
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
      