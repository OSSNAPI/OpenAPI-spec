openapi: 3.0.0
info:
  version: 1.0.0
  title: Social Network API
servers:
  - url: 'http://localhost:3000'
paths:

######################### User Collection Starts here #####################

#-----------------
# User Register/Create API
#------------------
  /users:
    post:
        summary: 'Create a new user'
        operationId: createUser
        requestBody:
            description: 'User to add to system'
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/User'
        responses:
            '201':
                description: 'User successfully added'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 201
                            message: 'user successfully created'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
#-----------------
# Get Multiple users
#------------------
    get:
      summary: 'Returns list of users based on limit and offset'
      operationId: listUser
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: type
          required: true
          description: Type of user to be retrived.
          schema:
              type: string
              enum: 
                  # Get all users
                  - all
                  # Get users followed by current user
                  - following
                  # Get random user , Note: Offset wont work with this type
                  - random
      responses:
        '200':
          description: 'List of users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
              example: 
                  - id: 21
                    name: 'Ellie D'
                    username: 'its_ellie'
                    email: 'ellie@gmail.com'
                    img: 'exapmle.com/ellie/profile.png'
                    meta: {
                        gender: 'Female',
                        city: 'New York',
                        country: 'USA'
                    }
                  - id: 10
                    name: 'Pranjal Pandey'
                    username: 'physcocode'
                    email: 'pranjal@corpusvision.com'
                    img: 'exapmle.com/physcocode/profile.png'
                    meta: {
                        gender: 'Male',
                        city: 'Mumbai',
                        country: 'India'
                    }
                  - id: 10
                    name: 'Vineet Singh'
                    username: 'Veneed'
                    email: 'vineet@corpusvision.com'
                    img: 'exapmle.com/veneed/profile.png'
                    meta: {
                        gender: 'Male',
                        city: 'Mumbai',
                        country: 'India'
                    }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


#-----------------
# Get Single User
#------------------
  /users/{id}:
    get:
      summary: 'Returns details about a particular user'
      operationId: getUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Details about a user by ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                  Pranjal:
                      value:
                        id: 10
                        name: 'Pranjal Pandey'
                        username: 'physcocode'
                        email: 'pranjal@corpusvision.com'
                        img: 'exapmle.com/physcocode/profile.png'
                        meta: {
                            gender: 'Male',
                            city: 'Mumbai',
                            country: 'India'
                        }
                  Ellie:
                    value:
                        id: 21
                        name: 'Ellie D'
                        username: 'its_ellie'
                        email: 'ellie@gmail.com'
                        img: 'exapmle.com/ellie/profile.png'
                        meta: {
                            gender: 'Female',
                            city: 'New York',
                            country: 'USA'
                        }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

#-----------------
# Update Single User
#------------------
    put:
      summary: 'update detail about a single user'
      operationId: updateUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
          description: 'User to add to system'
          content:
            application/json:
                schema:
                    $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'Updated user detail'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                  Pranjal:
                      value:
                        id: 10
                        name: 'Pranjal P'
                        username: 'physcocode'
                        email: 'pranjal@corpusvision.com'
                        img: 'exapmle.com/physcocode/profile.png'
                        meta: {
                            gender: 'Male',
                            city: 'Mumbai',
                            country: 'India'
                        }
                  Ellie:
                    value:
                        id: 21
                        name: 'Ellie Don'
                        username: 'its_ellie'
                        email: 'ellie@gmail.com'
                        img: 'exapmle.com/ellie/profile.png'
                        meta: {
                            gender: 'Female',
                            city: 'New York',
                            country: 'USA'
                        }


        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

#-----------------
# Delete Single User
#------------------
    delete:
        summary: 'Delete a single user'
        operationId: deleteUser
        parameters:
            - name: id
              in: path
              description: ID of the user
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
        responses:
            '200':
                description: 'User successfully deleted'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'user successfully deleted'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'

################################# User Collection Ends Here ###############################  

######################### Post Collection Starts here #####################
# Posts are actual entity that keeps status update in text, image upload etc it is backbone of social network
#-----------------
# Create Post
#------------------
  /posts:
    post:
        summary: 'Create a new post'
        operationId: createPost
        requestBody:
            description: 'Add Post to system'
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Post'
        responses:
            '201':
                description: 'Post Successfully Added'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 201
                            message: 'post successfully created'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
#-----------------
# Get Multiple posts
#------------------
    get:
      summary: 'Returns list of posts based on limit and offset'
      operationId: listPost
      tags:
        - post
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: type
          required: true
          description: type of possts to be retrived.
          schema:
              type: string
              enum: 
                  # Get all public post
                  - all
                  # Get posts of people followed by user
                  - following
                  # Get post of user both private and public
                  - me
      responses:
        '200':
          description: 'List of post'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPosts'
              example:
                  #image type post
                  - id: 13
                    type: "Image"
                    owner: {
                        id: 10,
                        name: "Pranjal Pandey",
                        username: "physcocoede",
                        image: "example.com/physcocode/profile.png"
                    }
                    created_at: "2017-07-21T17:32:28Z"
                    visibility: public
                    meta: {
                        'status': 'I am a example status update with image',
                        'image': 'example.com/image.png' 
                    }
                    like_count: 9
                    comment_count: 12
                    #text type post
                  - id: 19
                    type: "Text"
                    owner: {
                        id: 10,
                        name: "Pranjal Pandey",
                        username: "physcocoede",
                        image: "example.com/physcocode/profile.png"
                    }
                    created_at: "2017-07-21T17:32:28Z"
                    visibility: public
                    meta: {
                        'status': 'I am a example of text status update !',
                    }
                    like_count: 22
                    comment_count: 4
                    #video type post
                  - id: 33
                    type: "Video"
                    owner: {
                        id: 12,
                        name: "Vineet Singh",
                        username: "vineed",
                        image: "example.com/vineed/profile.png"
                    }
                    created_at: "2017-07-21T17:32:28Z"
                    visibility: public
                    meta: {
                        'status': 'I am a example of text status update !',
                        'video': 'example.com/video.mp4'
                    }
                    like_count: 22
                    comment_count: 4
                    #slideshow type post
                  - id: 23
                    type: "Slideshow"
                    owner: {
                        id: 12,
                        name: "Vineet Singh",
                        username: "vineed",
                        image: "example.com/vineed/profile.png"
                    }
                    created_at: "2017-07-21T17:32:28Z"
                    visibility: public
                    meta: {
                        'status': 'I am a example of slideshow update !',
                        'image': [
                            'example.com/image1.png',
                            'example.com/image2.png',
                            'example.com/image3.png'
                        ]
                    }
                    like_count: 28
                    comment_count: 9
                                                           
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


#-----------------
# Get Single Post
#------------------
  /posts/{id}:
    get:
      summary: 'Returns details about a particular post'
      operationId: getPost
      tags:
        - post
      parameters:
        - name: id
          in: path
          description: ID of the post
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Details about a post by its ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPost'
              examples:
                  image:
                      summary: 'Example of Image type post'
                      value:
                        id: 13
                        type: "Image"
                        owner: {
                            id: 10,
                            name: "Pranjal Pandey",
                            username: "physcocoede",
                            image: "example.com/physcocode/profile.png"
                        }
                        created_at: "2017-07-21T17:32:28Z"
                        visibility: public
                        meta: {
                            'status': 'I am a example status update with image',
                            'image': 'example.com/image.png' 
                        }
                        like_count: 9
                        comment_count: 12
                    #text type post
                  text:
                      summary: 'Example of text type post'
                      value:
                        id: 19
                        type: "Text"
                        owner: {
                            id: 10,
                            name: "Pranjal Pandey",
                            username: "physcocoede",
                            image: "example.com/physcocode/profile.png"
                        }
                        created_at: "2017-07-21T17:32:28Z"
                        visibility: public
                        meta: {
                            'status': 'I am a example of text status update !',
                        }
                        like_count: 22
                        comment_count: 4
                  
                  video:
                      summary: 'Example of video type post'
                      value:
                        id: 33
                        type: "Video"
                        owner: {
                            id: 12,
                            name: "Vineet Singh",
                            username: "vineed",
                            image: "example.com/vineed/profile.png"
                        }   
                        created_at: "2017-07-21T17:32:28Z"
                        visibility: public
                        meta: {
                           'status': 'I am a example of text status update !',
                            'video': 'example.com/video.mp4'
                        }
                        like_count: 22
                        comment_count: 4
                  slideshow:
                      summary: 'slideshow type of post'
                      value:
                        id: 23
                        type: "Slideshow"
                        owner: {
                            id: 12,
                            name: "Vineet Singh",
                            username: "vineed",
                            image: "example.com/vineed/profile.png"
                        }
                        created_at: "2017-07-21T17:32:28Z"
                        visibility: public
                        meta: {
                            'status': 'I am a example of slideshow update !',
                            'image': [
                                'example.com/image1.png',
                                'example.com/image2.png',
                                'example.com/image3.png'
                            ]
                        }
                        like_count: 28
                        comment_count: 9
                  
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

#-----------------
# Update Single Post , Note: Currently editing post is not provided but maybe in future , open for discussion
#------------------
    # put:
    #   summary: 'update detail about a single post'
    #   operationId: updatePost
    #   tags:
    #     - post
    #   parameters:
    #     - name: id
    #       in: path
    #       description: ID of the post
    #       required: true
    #       schema:
    #         type: integer
    #         format: int64
    #         minimum: 1
    #   requestBody:
    #       description: 'User to add to system'
    #       content:
    #         application/json:
    #             schema:
    #                 $ref: '#/components/schemas/Post'
    #   responses:
    #     '200':
    #       description: 'Updated user detail'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Post'
           
    #     default:
    #       description: Unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'

#-----------------
# Delete Single Post
#------------------
    delete:
        summary: 'Delete a single post'
        operationId: deletePost
        parameters:
            - name: id
              in: path
              description: ID of the post
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
        responses:
            '200':
                description: 'Post successfully deleted'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'post successfully deleted'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'



########################## Post Collection Ends here ######################

######################### Comment and Likes Collection Starts here ####################
#-----------------
# Create new comment
#------------------ 
  /comments:
     post:
        summary: 'Create a comment and attach to post' 
        operationId: createComment
        requestBody:
            description: 'Add Post to system'
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Comment'
        responses:
            '201':
                description: 'Comment Successfuly added'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 201
                            message: 'comment Successfuly Added'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
#-----------------
# Get all comments of a post
#------------------
     get:
         summary: 'get comments of a post'
         operationId: getComment
         parameters:
            - in: query
              name: post_id
              required: true
              description: Type of user to be retrived.
              schema:
                type: integer
         responses:
            '200':
                description: 'List comment for a post'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Comments'
                        example: 
                            - id: 23
                              post: 32
                              owner: 10
                              body: "I like this post"
                              created_at: "2017-07-21T17:32:28Z"
                            - id: 24
                              post: 32
                              owner: 21
                              body: "This post seems great"
                              created_at: "2017-07-21T17:32:28Z"
                            - id: 25
                              post: 32
                              owner: 14
                              body: "Hahah this is funny"
                              created_at: "2017-07-21T17:32:28Z"  
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'

#-----------------
# Delete Single Comment
#------------------
  /comments/{id}:
     delete:
        summary: 'Delete a single comment' 
        operationId: deleteComment
        parameters:
            - name: id
              in: path
              description: ID of the comment
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
        responses:
            '200':
                description: 'Comment Successfuly deleted'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'comment Successfuly Deleted'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
#-----------------
# Update a Comment
#------------------
     put:
         summary: 'Update a comment'
         operationId: updateComment
         parameters:
            - name: id
              in: path
              description: ID of the comment
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
         requestBody:
             description: 'Add Post to system'
             content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Comment'
         responses:
            '200':
                description: 'Comment after being updated'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Comment'
                        example: 
                             id: 23
                             post: 32
                             owner: 10
                             body: "The updated comment"
                             created_at: "2017-07-21T17:32:28Z"
                           
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'

#-----------------
# Like a post
#------------------ 
  /likes:
     post:
        summary: 'Like a post' 
        operationId: like
        requestBody:
            description: 'Add Like to post'
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Like'
        responses:
            '201':
                description: 'Post successfully liked'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'Post successfully liked'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
#-----------------
# Get all likes of the post
#------------------
     get:
         summary: 'get likes of a post'
         operationId: getLike
         parameters:
            - in: query
              name: post_id
              required: true
              description: id of post whose likes need to be retrived
              schema:
                type: integer
         responses:
            '200':
                description: 'List user that likes post'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetLikes'
                        example: 
                            - id: 10  
                              post: 25
                              owner: {
                                id: 10,
                                name: "Pranjal Pandey",
                                username: "physcocoede",
                                image: "example.com/physcocode/profile.png"
                              }
                              created_at: "2017-07-21T17:32:28Z" 

                            - id: 13 
                              post: 25
                              owner: {
                                id: 12,
                                name: "Ellie D",
                                username: "its_ellie",
                                image: "example.com/ellie/profile.png"
                                }
                              created_at: "2017-07-21T17:32:28Z" 
                               
                            - id: 23 
                              post: 25
                              owner: {
                                id: 15,
                                name: "Vineet Singh",
                                username: "vineed",
                                image: "example.com/vineed/profile.png"
                                }
                              created_at: "2017-07-21T17:32:28Z"  
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'

#-----------------
# Unlike a post / Delete Like
#------------------
     delete:
        summary: 'Unlike a post' 
        operationId: unlike
        parameters:
            - name: post_id
              in: query
              description: ID of post
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
            - name: user_id
              in: query
              description: ID of user 
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1    
        responses:
            '200':
                description: 'Post successfully unliked'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'Post successfully unliked'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'


######################### Comment and Likes Collection Ends here #####################

######################### API collection to work with user relations  #########################
#-----------------
# Create relation between two user
# Relations can be anything from friends to follow or as complex as circles introduced by google+
#------------------  
  /relations:
     post:
        summary: 'Create new relation between two users' 
        operationId: createRelations
        requestBody:
            description: 'Information about users and type of relation'
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserRelation'
        responses:
            '201':
                description: 'Relation successfully created'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'Relation successfully created'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
#-----------------
# Get all likes of the post
#------------------
     get:
         summary: 'get all relation of a user'
         operationId: getRelations
         parameters:
            - in: query
              name: user_id
              required: true
              description: id of users whose relations is to be listed
              schema:
                type: integer
         responses:
            '200':
                description: 'List user that are related to current user'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetUserRelations'
                        example: 
                            - id: 10  
                              owner: 25
                              user: {
                                id: 10,
                                name: "Pranjal Pandey",
                                username: "physcocoede",
                                image: "example.com/physcocode/profile.png"
                              }
                              type: 'follow'
                              bidirectional: false
                              created_at: "2017-07-21T17:32:28Z"
                              meta: {} 

                            - id: 13 
                              owner: 25
                              user: {
                                id: 12,
                                name: "Ellie D",
                                username: "its_ellie",
                                image: "example.com/ellie/profile.png"
                                }
                              type: 'follow'
                              bidirectional: false
                              created_at: "2017-07-21T17:32:28Z"
                              meta: {} 
                               
                            - id: 23 
                              owner: 25
                              user: {
                                id: 15,
                                name: "Vineet Singh",
                                username: "vineed",
                                image: "example.com/vineed/profile.png"
                                }
                              type: 'follow'
                              bidirectional: false  
                              created_at: "2017-07-21T17:32:28Z"
                              meta: {}  
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'

#-----------------
# Delete the relations bettwen user
# This is to perform action like unfollow or unfriend
#------------------
     delete:
        summary: 'Remove relation between users' 
        operationId: unlike
        parameters:
            - name: owner_id
              in: query
              description: ID of user who is owner of relation ("Followed by")
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
            - name: user_id
              in: query
              description: ID of user whom the owner is related to ("Followed to")
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1    
        responses:
            '200':
                description: 'Relation successfully removed'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'Relation successfully removed '
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
  

######################### API collection to work with user relations Ends here #####################

######################### API collection to work with messages #####################
#-----------------
# Send message to a room
#------------------
  /messages:
     post:
        summary: 'Send message to a room' 
        operationId: createMessages
        requestBody:
            description: 'Message to send'
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Message'
        responses:
            '201':
                description: 'Message Successfully sent'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'Message Successfully sent'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'

#-----------------
# Get all messages of a room
#------------------
     get:
         summary: 'get all messages of a room'
         operationId: getMessages
         parameters:
            - in: query
              name: room_id
              required: true
              description: id of room whose message to get
              schema:
                type: integer
         responses:
            '200':
                description: 'List of messages in a room'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Messages'
                        example: 
                            - id: 13 
                              room: 25
                              owner: 12
                              created_at: "2017-07-21T17:32:28Z"
                              message: "Hi" 

                            - id: 16 
                              room: 25
                              owner: 13
                              created_at: "2017-07-21T17:32:28Z"
                              message: "Hey, wassup?" 
                               
                            - id: 18 
                              room: 25
                              owner: 12
                              created_at: "2017-07-21T17:32:28Z"
                              message: "I am good"
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
#-----------------
# Delete all messages of a room
#------------------
     delete:
         summary: 'delete all messages of a room'
         operationId: deleteMessages
         parameters:
            - in: query
              name: room_id
              required: true
              description: id of room whose message to delete
              schema:
                type: integer
         responses:
            '200':
                description: 'Successfully deleted all message in room'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example:
                            code: 200
                            message: 'Successfully deleted all message in room'                             
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'

#-----------------
# Delete single message
#------------------  
  /messages/{id}:
      delete:
          summary: 'delete a single message'
          operationId: deleteMessage
          parameters:
            - in: query
              name: id
              required: true
              description: id of message to delete
              schema:
                type: integer
          responses:
            '200':
                description: 'Successfully deleted message'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example:
                            code: 200
                            message: 'Successfully deleted message'                             
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
#-----------------
# Create a room
#------------------  
  /messages/rooms:
      post:
        summary: 'Create a new Room' 
        operationId: createRoom
        requestBody:
            description: 'Detail about room including users'
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/MessageRoom'
        responses:
            '201':
                description: 'Room successfully created'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example: 
                            code: 200
                            message: 'Room successfully created'
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'
      delete:
          summary: 'delete a room'
          operationId: deleteRoom
          parameters:
            - in: query
              name: id
              required: true
              description: id of room to delete
              schema:
                type: integer
          responses:
            '200':
                description: 'Successfully deleted room'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Success'
                        example:
                            code: 200
                            message: 'Successfully deleted room'                             
            default:
                description: Unexpected error
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Error'        
                
######################### End of API collection to work with messages #####################


components:
  schemas:
#--------------------   
# Array of Users 
#--------------------
    Users:  
        type: array
        items:
            $ref: '#/components/schemas/User'

#-----------------------
# User model  
# extra user information can be stored in user meta like DOB, city etc 
#------------------------ 
    User:
      type: object
      required:
        - id
        - name
        - username
        - email
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        name:
          type: string
        username:
            type: string
        email:
          type: string
          format: email
        #profile pic of user  
        img:
           type: string   
        #meta can be used as object container to store any kind of information about user as per your application requires  
        meta:
          type: object
          additionalProperties: true  
          example: {
              'DOB': '10/10/1997',
              'City': 'mumbai'
          }
      example: 
            id: 21
            name: 'Ellie D'
            username: 'its_ellie'
            email: 'ellie@gmail.com'
            img: 'exapmle.com/ellie/profile.png'
            meta: {
                gender: 'Female',
                city: 'New York',
                country: 'USA'
            }

#-----------------------
# User details summary to be embedded into get request  
#------------------------ 
    UserSummary:
      type: object
      required:
        - id
        - name
        - username
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        name:
          type: string
        username:
            type: string
        img:
           type: string   
        #meta can be used as object container to store any kind of information about user as per your application requires  

      example: 
            id: 21
            name: 'Ellie D'
            username: 'its_ellie'
            img: 'exapmle.com/ellie/profile.png'
        
#-----------------------
# User relations
# This model can be used to create friends, follow and other relation between users
#------------------------ 
    UserRelation:
        type: object
        required:
            - id
            - owner
            - user
            - type
        properties:
            id:
                type: integer
                format: int64
                minimum: 1
            #id of user who is creating relation
            owner:
                type: integer
            #id of user whome owner is following    
            user:
                type: integer
            #type of relation eg: follow, friend, connection etc    
            type:
                type: string
            # is relation bidirectional like friends or unidirectional like follow ?    
            bidirectional:
                type: boolean
            #any other meta you want to store about relation    
            meta:
                type: object
                additionalProperties: true 
        example:
            id: 11
            owner: 10
            user: 12
            type: 'follow'
            bidirectional: false
            meta: {

            }       
#--------------------   
# Array of UserRelations
#--------------------
    GetUserRelations:  
        type: array
        items:
            $ref: '#/components/schemas/GetUserRelation'                
#-----------------------
# Model to get list of related users
#------------------------ 
    GetUserRelation:
        type: object
        required:
            - id
            - owner
            - user
            - type
        properties:
            id:
                type: integer
                format: int64
                minimum: 1
            owner:
                type: integer
            user:
                $ref: '#/components/schemas/UserSummary'
            type:
                type: string
            # is relation bidirectional like friends or unidirectional like follow ?    
            bidirectional:
                type: boolean
            #any other meta you want to store about relation    
            meta:
                type: object
                additionalProperties: true 
        example:
            id: 11
            owner: 10
            user: {
                id: 12,
                name: 'Vineet Singh',
                username: 'vineed',
                img: 'example.com/vineed/profile.png'
            }
            type: 'friend'
            bidirectional: true
            meta: {
             accepted: true
            }
          


#-----------------------
# Post model
# All detail required to render post can be added in meta like discription, image url etc
#-----------------------      
    
    Post:
      type: object
      required:
        - id
        - owner
        - visibility
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        #type of post (image,text,video etc) 
        type:
            type: string
            example: 'image'
        #id of owner(user) post is added by   
        owner:
          type: integer
          format: int64
          minimum: 1
        created_at:
            type: string
            format: date-time
        visibility:
            type: string
            # limited type can be used to represent post which is displayed ti only friends or followers etc
            enum: 
                - public
                - private
                - limited  
        # meta holds all the property you would need to render the post in a view eg: status update, image url, video url etc    
        # Note : meta SHOULD ALWAYS have 'type' field to determine post type , helps in binding status updates with renders 
        meta:
          type: object
          additionalProperties: true  
          example: {
              'status': 'i am a example status update',
              'image': 'example.com/image.png' 
          }
      example: 
        id: 10
        type: 'image'
        owner: 10
        created_at: "2017-07-21T17:32:28Z"
        visibility: public
        meta: {
            'status': 'I am a example status update with image',
            'image': 'example.com/image.png' 
        }

#--------------------   
# Array of Posts to display 
#--------------------
    GetPosts:  
        type: array
        items:
            $ref: '#/components/schemas/GetPost'

#-----------------------
# Post model returned on get request to 
# All detail required to render post can be found in meta like discription, image url etc
#-----------------------
      
    GetPost:
      type: object
      required:
        - id
        - owner
        - visibility
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        type:
            type: string
            example : 'image'  
        # Details of owner to be rendered on display 
        owner:
          $ref: '#/components/schemas/UserSummary'
        created_at:
            type: string
            format: date-time
        visibility:
            type: string
            # limited type can be used to represent post which is displayed ti only friends or followers etc
            enum: 
                - public
                - private
                - limited  
        #no. of likes on post
        like_count: 
            type: integer
            format: int64
            minimum: 1  
        #no. of comments on post
        comment_count: 
            type: integer
            format: int64
            minimum: 1          
        # meta holds all the property you would need to render the post in a view eg: status update, image url, video url etc    
        # Note : meta SHOULD ALWAYS have 'type' field to determine post type , helps in binding status updates with renders 
        meta:
          type: object
          additionalProperties: true  
          example: {
              'status': 'i am a exaple status update',
              'image': 'example.com/image.png' 
          }
      example:
          id: 10
          type: "Image"
          owner: {
              id: 10,
              name: "Pranjal Pandey",
              username: "physcocoede",
              image: "example.com/physcocode/profile.png"
           }
          created_at: "2017-07-21T17:32:28Z"
          visibility: public
          meta: {
            'status': 'I am a example status update with image',
            'image': 'example.com/image.png' 
          }
          like_count: 9
          comment_count: 12


#--------------------   
# Array of comments to display 
#--------------------
    GetComments:  
        type: array
        items:
            $ref: '#/components/schemas/GetComment'

#-----------------------
# Get comment with user deetails to be displayed
#------------------------    
    GetComment:
      type: object
      required:
        - id
        - post
        - owner
        - comment
      properties:
        id:
          type: integer
          format: int64
        # id of post comment is part of  
        post:
          type: integer
        #id of owner(user) comment is done by   
        owner:
            $ref: '#/components/schemas/UserSummary'
        #the actual comment    
        body:
          type: string
        created_at:
            type: string
            format: date-time
      example:
          id: 23
          post: 32
          owner: {
              id: 10,
              name: "Pranjal Pandey",
              username: "physcocoede",
              image: "example.com/physcocode/profile.png"
           }
          body: "i like this post"
          created_at: "2017-07-21T17:32:28Z" 


#-----------------------
#comment model
#------------------------    
    Comment:
      type: object
      required:
        - id
        - post
        - owner
        - comment
      properties:
        id:
          type: integer
          format: int64
        # id of post comment is part of  
        post:
          type: integer
        #id of owner(user) comment is done by   
        owner:
            type: integer
        #the actual comment    
        body:
          type: string
        created_at:
            type: string
            format: date-time
      example:
          id: 23
          post: 32
          owner: 10
          body: "i like this post"
          created_at: "2017-07-21T17:32:28Z" 

#--------------------   
# Array of likes to display 
#--------------------
    GetLikes:  
        type: array
        items:
            $ref: '#/components/schemas/GetLike'

#-----------------------  
# Model to list people who liked the post
#-----------------------
    GetLike:
      type: object
      required:
        - id
        - post
        - owner
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        # id of post like is part of  
        post:
          type: integer
        #id of owner(user) who liked the post
        owner:
            $ref: '#/components/schemas/UserSummary'
        created_at:
            type: string
            format: date-time
      example:
          id: 10  
          post: 25
          owner: {
              id: 10,
              name: "Pranjal Pandey",
              username: "physcocoede",
              image: "example.com/physcocode/profile.png"
           }
          created_at: "2017-07-21T17:32:28Z" 


#-----------------------  
# Model to store the list of people who likes the post
#-----------------------
    Like:
      type: object
      required:
        - id
        - post
        - owner
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        # id of post like is part of  
        post:
          type: integer
        #id of owner(user) who liked the post
        owner:
            type: integer
        created_at:
            type: string
            format: date-time
      example:
          id: 10  
          post: 25
          owner: 10
          created_at: "2017-07-21T17:32:28Z" 

#-----------------------  
# Model to store data in activity feed
#-----------------------
    Feed:
        type: object
        required:
            - id
            - owner
            - action
            - object
            - type
        properties:
            id:
                type: integer
                format: int64
                minimum: 1
          #id of owner(user) who performed action
            owner:
                type: integer
          #type of action performed (Verb)     
            action:
                type: string
          #id of object the action is performed on (Object can be other user,post etc)
            object:
                 type: integer 
          #type of activity (can be used to determine how to render feed in view)    
            type:
                 type: string
 
        example:
            # This is an exapmple of Pranjal (id:10) followed Vineet (id:20)
            id: 5
            owner: 10
            action: 'followed'
            object: 20 
            type: 'follow'
            created_at: "2017-07-21T17:32:28Z" 

#--------------------   
# Array of Feeds to display 
#--------------------
    GetFeeds:  
        type: array
        items:
            $ref: '#/components/schemas/GetFeed'


#-----------------------  
# Model to get data to render activity feed in view
# Message can be rendered by using 'owner.name + action + object.type/object.name
# Eg: msg could be 'Pranjal liked Image' 
#-----------------------
    GetFeed:
        type: object
        required:
            - id
            - owner
            - action
            - object
            - type
        properties:
            id:
                type: integer
                format: int64
                minimum: 1
          #id of owner(user) who performed action
            owner:
                $ref: '#/components/schemas/UserSummary'
                                 
          #type of action performed (Verb)     
            action:
                type: string
                example: 'liked'
          #post object if the action is performed on post, user object if action is performed on other user
            object:
                 oneOf:
                    - $ref: '#/components/schemas/User'
                    - $ref: '#/components/schemas/GetPost'
          #type of activity (can be used to determine how to render feed in view)    
            type:
                 type: string
#---------------------------
# Model to create message rooms(Chat rooms) where message can be exchanged
# Message room can be both 1-1 and group
#--------------------------- 
    MessageRoom:
        type: object
        properties:
            id:
                type: integer
                format: int64
                minimum: 1
            type:
                type: string
                enum:
                    - single
                    - group
            #id of user who created the room (imp for group rooms)
            owner: 
                type: integer
            # other user in room string for 1-1 and array for group    
            users:
                oneOf:
                    - type: string
                    - type: array 
        example:
            id: 12
            type: 'single'
            owner: 12
            users: 21    

#--------------------   
# Array of messages to display 
#--------------------
    Messages:  
        type: array
        items:
            $ref: '#/components/schemas/Message'
#---------------------------
# Model to store message
#--------------------------- 
    Message:
        type: object
        properties:
            id:
                type: integer
                format: int64
                minimum: 1
            #id of message room the message is part of    
            room:
                type: integer               
            #id of user who sent message
            owner: 
                type: integer
            # other user in room string for 1-1 and array for group    
            message: 
                type: string
            created_at:
                type: string
                format: date-time

        example:
            id: 12
            room: 32
            owner: 12
            message: 'Hi whats up ?'                           


#-----------------------
# Simple model to return on successful create operations
#-----------------------
    Success:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          minimum: 200
          maximum: 201
        message:
          type: string
          example: 'Post has been successfully added'
      example:
        code: 200
        message: 'Object have been successfully added'   

#-----------------------
# General Error return model
#-----------------------
    Error:
        type: object
        required:
            - code
            - message
        properties:
            code:
                type: integer
                format: int32
                minimum: 400
                maximum: 511
            message:
                type: string
        example: 
          code: 500
          message: 'Oops something went wrong !'
              

#-----------------------
# Wherever offset is requires in list
#-----------------------
  parameters:
    offsetParam:      
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
#-----------------------
# Wherever limit is required in list
#-----------------------
    limitParam:       
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
      